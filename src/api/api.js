import axios from "axios";

const API_URL_USER = import.meta.env.VITE_API_USER_URL;
const API_PRODUCT_URL = import.meta.env.VITE_API_PRODUCT_URL;
const API_REVIEW_URL = import.meta.env.VITE_API_REVIEW_URL;
const API_AUTH_URL = import.meta.env.VITE_API_AUTH_URL;
const API_ADDRESS_URL = import.meta.env.VITE_API_ADDRESS_URL;
const API_ORDER_URL = import.meta.env.VITE_API_ORDER_URL;
const API_SHOPPING_CART_URL = import.meta.env.VITE_API_SHOPPING_CART_URL;
const API_URL_NOTIFY = import.meta.env.VITE_API_NOTIFICATION_URL;
const API_PAYMENT_URL = import.meta.env.VITE_API_PAYMENT_URL;
const API_URL_STATISTIC = import.meta.env.VITE_API_STATISTIC_URL;

export const cloundinaryURL = import.meta.env.VITE_CLOUDINARY_CLOUD_URL;
export const cloundinaryPreset = import.meta.env.VITE_CLOUDINARY_PRESET;
export const cloundinaryName = import.meta.env.VITE_CLOUDINARY_NAME;

const api = axios.create({
  baseURL: API_PRODUCT_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const productAPI = axios.create({
  baseURL: API_PRODUCT_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const userAPI = axios.create({
  baseURL: API_URL_USER,
  headers: {
    "Content-Type": "application/json",
  },
});

const reviewAPI = axios.create({
  baseURL: API_REVIEW_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const auth = axios.create({
  baseURL: API_AUTH_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const address = axios.create({
  baseURL: API_ADDRESS_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const orderAPI = axios.create({
  baseURL: API_ORDER_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const shoppingCartAPI = axios.create({
  baseURL: API_SHOPPING_CART_URL,
  headers: {
    "Content-Type": "application/json",
  },
});
const notifyAPI = axios.create({
  baseURL: API_URL_NOTIFY,
  headers: {
    "Content-Type": "application/json",
  },
});

const paymentAPI = axios.create({
  baseURL: API_PAYMENT_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

const statisticAPI = axios.create({
  baseURL: API_URL_STATISTIC,
  headers: {
    "Content-Type": "application/json",
  },
});

//S·∫¢N PH·∫®M
export const handleProductApi = {
  getListProducts: async (key) => {
    try {
      const response = await productAPI.get(`/${key}`);
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
      return error;
    }
  },
  //C·∫≠p nh·∫≠t tr·∫°ng th√°i s·∫£n ph·∫©m
  updateProductStatus: async (productID, status) => {
    return await productAPI.put(`/products/status/${productID}`, { status });
  },
  //T√¨m s·∫£n ph·∫©m theo id
  getProductById: async (id) => {
    return await productAPI.get(`/products/${id}`);
  },

  //Th√™m s·∫£n ph·∫©m m·ªõi
  addProduct: async (data) => {
    return await productAPI.post("/products", data);
  },
  addCategory: async (data) => {
    return await productAPI.post("/categories", data);
  },
  updateProduct: async (id, data) => {
    return await productAPI.put(`/products/${id}`, data);
  },
  //Th√™m phi·∫øu nh·∫≠p kho

  insertStockEntry: async (data) => {
    return await productAPI.post("/stock-entries", data);
  },
  //L·∫•y th√¥ng tin nh·∫≠p h√†ng
  getStockEntry: async (stockID) => {
    return await productAPI.get(`/stock-entries/${stockID}`);
  },
  //X√≥a h√¨nh ·∫£nh tr√™n cloud
  deleteImage: async (publicId) => {
    return await productAPI.post("/products/delete-image", { publicId });
  },
};

//NG∆Ø·ªúI DUNG
export const handleUserApi = {
  //L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi d√πng
  getUserInfo: async (userID) => {
    return await userAPI.get(`/user/${userID}`);
  },
  //L·∫•y danh s√°ch ng∆∞·ªùi d√πng
  getUsers: async () => {
    return await userAPI.get("/user");
  },
  //C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  updateUserInfo: async (userID, data) => {
    return await userAPI.put(`/user/${userID}`, data);
  },
};

//TH√îNG B√ÅO
export const handleNotifyApi = {
  //L·∫•y danh s√°ch th√¥ng b√°o

  getNotificationsByReceiver: async (receiverID) => {
    return await notifyAPI.get(`/notifications/${receiverID}`);
  },
  markAsRead: async (notifyID) => {
    return await notifyAPI.patch(`/notifications/${notifyID}/read`);
  },
  createNotification: async (data) => {
    return await notifyAPI.post("/notifications", data);
  },
};

//ƒê∆†N H√ÄNG
export const handleOrderApi = {
  //L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID
  getOrderById: async (orderID) => {
    return await orderAPI.get(`/orders/${orderID}`);
  },
  //L·∫•y danh s√°ch ƒë∆°n h√†ng theo userID
  getOrdersByUserId: async (userID) => {
    return await orderAPI.get(`/orders/user/${userID}`);
  },
   updateStatus: async (orderID, updateData) => {
    try {
      // Truy·ªÅn to√†n b·ªô updateData trong body request
      const response = await orderAPI.put(`/orders/${orderID}`, updateData);
      return response;
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
      throw error;
    }
  },
  //L·∫•y danh s√°ch t·∫•t cva3 ƒë∆°n h√†ng
  getAllOrders: async () => {
    return await orderAPI.get("/orders");
  },
};
//TH·ªêNG K√ä
export const handleStatisticApi = {
  // Th·ªëng k√™ doanh thu h√†ng ng√†y
  getDailyRevenue: async (date) => {
    return await statisticAPI.get(`/statistics/daily?date=${date}`);
  },
  //T√¨nh tr·∫°ng doanh thu theo ng√†y
  getRevenueByPaymentMethod: async (date) => {
    return await statisticAPI.get(
      `/statistics/revenue-by-payment-method?date=${date}`
    );
  },
  //Th·ªëng k√™ ƒë∆°n h√†ng theo tr·∫°ng th√°i
  getOrderStatsByStatus: async (date) => {
    // statistics/order-status?date
    return await statisticAPI.get(`/statistics/order-status?date=${date}`);
  },
  //Th·ªëng k√™ doanh thu theo nƒÉm
  getYearlyRevenue: async (year) => {
    // statistics/yearly-revenue?year=2025
    return await statisticAPI.get(`/statistics/yearly-revenue?year=${year}`);
  },
  //Th·ªëng k√™ ƒë∆°n h√†ng th√†nh c√¥ng theo th√°ng c·ªßa nƒÉm
  getMonthlySuccessfulOrders: async (month, year) => {
    return await statisticAPI.get(
      `/statistics/daily-orders?month=${month}&year=${year}`
    );
  },
};
// ƒê√ÅNH GI√Å
export const handleReviewApi = {
  // H√†m t·∫°o ƒë√°nh gi√°
  createReview: async (data) => {
    return await reviewAPI.post("/reviews", data);
  },
};

// üü¢ L∆∞u th√¥ng tin s·∫£n ph·∫©m v√†o order
export const saveShoppingCarts = async (orderData) => {
  try {
    const response = await shoppingCartAPI.post("/shopping-carts", orderData);
    return response.data;
  } catch (error) {
    if (error.response) {
      // In ra ph·∫£n h·ªìi t·ª´ m√°y ch·ªß n·∫øu c√≥
      console.error("API response error:", error.response.data);
    }
    console.error("L·ªói khi l∆∞u th√¥ng tin s·∫£n ph·∫©m v√†o gi·ªè h√†ng:", error);
    return null;
  }
};

// üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m
export const getProducts = async () => {
  try {
    const response = await api.get("/products");
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
    return [];
  }
};

// üü¢ L·∫•y th√¥ng tin s·∫£n ph·∫©m theo ID
export const getProductById = async (id) => {
  try {
    const response = await api.get(`/products/${id}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error);
    return null;
  }
};

// H√†m l·∫•y th√¥ng tin s·∫£n ph·∫©m c·ª• th·ªÉ theo id
export const getUserById = async (userID) => {
  try {
    const response = await userAPI.get(`/users/${userID}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    return null;
  }
};

// üü¢ L·∫•y gi·ªè h√†ng theo userID
export const getShoppingCartByUserId = async (userID) => {
  try {
    const response = await shoppingCartAPI.get(
      `/shopping-carts/user/${userID}`
    );
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y gi·ªè h√†ng theo userID:", error);
    return null;
  }
};

// üü¢ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
export const updateCartQuantity = async (
  shoppingCartID,
  productID,
  quantity
) => {
  try {
    console.log(
      "Request URL:",
      shoppingCartAPI.defaults.baseURL + "/shopping-carts/update-quantity"
    );
    console.log("Payload:", { shoppingCartID, productID, quantity });

    const response = await shoppingCartAPI.patch(
      "/shopping-carts/update-quantity",
      {
        shoppingCartID,
        productID,
        quantity,
      }
    );
    return response.data;
  } catch (error) {
    if (error.response) {
      console.error("API Error Response:", error.response.data);
    }
    console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng:", error);
    return null;
  }
};
// üü¢ X√≥a chi ti·∫øt gi·ªè h√†ng theo shoppingCartDetailID
export const deleteShoppingCartDetailById = async (shoppingCartDetailID) => {
  try {
    const response = await shoppingCartAPI.delete(
      `/shopping-carts/shopping-cart-details/${shoppingCartDetailID}`
    );
    return response.data;
  } catch (error) {
    console.error(
      "L·ªói khi x√≥a chi ti·∫øt gi·ªè h√†ng theo shoppingCartDetailID:",
      error
    );
    return null;
  }
};

// üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m theo kh√≥a
export const getListProducts = async (key) => {
  try {
    const response = await productAPI.get(`/${key}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
    return [];
  }
};

// üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m theo Category
export const getCategories = async () => {
  try {
    const response = await api.get("/categories");
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch danh m·ª•c:", error);
    return [];
  }
};

export const getListUsers = async (key) => {
  try {
    const response = await userAPI.get(`/${key}`);
    console.log("Full response:", response); // Xem to√†n b·ªô response
    console.log("User API Base URL:", API_URL_USER);

    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    return [];
  }
};

// üü¢ L·∫•y th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt theo ID
export const getProductDetail = async (id) => {
  try {
    const response = await productAPI.get(`products/${id}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", error);
    return null;
  }
};

// üü¢ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
export const getUserInfo = async (userID) => {
  try {
    const response = await userAPI.get(`user/${userID}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    return null;
  }
};

// üü¢ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
export const updateUserInfo = async (userID, token, updatedData) => {
  try {
    const response = await userAPI.put(`user/${userID}`, updatedData, {
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    return response.data;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
    return null;
  }
};

// üü¢ L·∫•y ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng theo ID
export const getAddressByID = async (userID) => {
  try {
    const response = await address.get(`/address?userID=${userID}`);
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
  } catch (error) {
    console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:", error);
    return null;
  }
};

// üü¢ API th√™m ƒë·ªãa ch·ªâ m·ªõi cho ng∆∞·ªùi d√πng
export const addNewAddress = async (addressData) => {
  try {
    const response = await address.post("/address", addressData, {
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (response.status === 201) {
      return {
        success: true,
        message: "‚úÖ ƒê·ªãa ch·ªâ ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!",
      };
    } else {
      return {
        success: false,
        message: response.data.message || "‚ùå L·ªói khi th√™m ƒë·ªãa ch·ªâ.",
      };
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi g·ª≠i API th√™m ƒë·ªãa ch·ªâ:", error);
    return {
      success: false,
      message: "‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.",
    };
  }
};

export const changePassword = async (
  email,
  oldPassword,
  newPassword,
  token
) => {
  try {
    const response = await auth.post(
      "/auth/change-password",
      {
        email,
        oldPassword,
        newPassword,
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("L·ªói khi thay ƒë·ªïi m·∫≠t kh·∫©u:", error);
    return null;
  }
};

// üü¢ Th√™m m·ªõi s·∫£n ph·∫©m
export const insertProduct = async (data) => {
  try {
    const response = await productAPI.post("/products", data);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    return null;
  }
};
// üü¢ Th√™m ƒë∆°n ƒë·∫∑t h√†ng m·ªõi
export const addOrder = async (orderData) => {
  try {
    const response = await orderAPI.post("/orders", orderData);
    return response.data;
  } catch (error) {
    if (error.response) {
      // In ra ph·∫£n h·ªìi t·ª´ m√°y ch·ªß n·∫øu c√≥
      console.error("API response error:", error.response.data);
    }
    console.error("L·ªói khi th√™m ƒë∆°n ƒë·∫∑t h√†ng:", error);
    return null;
  }
};
//L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
export const getAllOrders = async () => {
  try {
    const response = await orderAPI.get("/orders");
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
    return null;
  }
};

//C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
export const updateOrderStatus = async (orderID, status) => {
  try {
    const response = await orderAPI.put(`/orders/${orderID}`, { status });
    return response.data;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", error);
    return null;
  }
};

// üü¢ L·∫•y t·∫•t c·∫£ ƒë√°nh gi√° s·∫£n ph·∫©m
export const getAllReviews = async () => {
  try {
    const response = await reviewAPI.get("/reviews");
    const reviews = response.data;

    // Fetch both user and product information for each review
    const reviewsWithInfo = await Promise.all(
      reviews.map(async (review) => {
        try {
          const [userResponse, productResponse] = await Promise.all([
            userAPI.get(`/user/${review.userID}`),
            productAPI.get(`/products/${review.productID}`),
          ]);

          return {
            ...review,
            user: userResponse.data,
            product: productResponse.data,
          };
        } catch (error) {
          console.error("Error fetching data:", error);
          return {
            ...review,
            user: null,
            product: null,
          };
        }
      })
    );

    return reviewsWithInfo;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë√°nh gi√°:", error);
    return [];
  }
};

// üü¢ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
export const getAllProducts = async () => {
  try {
    const response = await api.get("/products");
    console.log("API response:", response.data); // In ra d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m:", error);
    return [];
  }
};

// üü¢ L·∫•y danh s√°ch danh m·ª•c t·ª´ s·∫£n ph·∫©m
export const getCategoriesFromProducts = async () => {
  try {
    const products = await getAllProducts();
    const categories = [
      ...new Set(products.map((product) => product.category)),
    ];
    return categories;
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch danh m·ª•c t·ª´ s·∫£n ph·∫©m:", error);
    return [];
  }
};

// üü¢ L·∫•y th√¥ng tin nh·∫≠p h√†ng
export const getStockEntry = async (id) => {
  try {
    const response = await productAPI.get(`/stock-entries/${id}`);
    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin nh·∫≠p h√†ng:", error);
    return null;
  }
};
//Auth
export const handleAuthApi = {
  // ƒêƒÉng nh·∫≠p
  login: async (formData) => {
    return await auth.post("/auth/login", formData);
  },

  // qu√™n m·∫≠t kh·∫©u
  forgotPassword: async (emailqmk) => {
    try {
      // G·ª≠i y√™u c·∫ßu ƒë·∫øn API v·ªõi email d∆∞·ªõi d·∫°ng query parameter
      const response = await auth.post(
        `/auth/forgot-password?email=${encodeURIComponent(emailqmk)}`
      );
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi g·ª≠i y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u:", error);
      // N√©m l·ªói t·ª´ backend n·∫øu c√≥, ho·∫∑c tr·∫£ v·ªÅ l·ªói m·∫∑c ƒë·ªãnh
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },
  verifyOtp: async (emailqmk, otp) => {
    try {
      // G·ª≠i email v√† otp d∆∞·ªõi d·∫°ng query parameters
      const response = await auth.post(
        `/auth/verify-otp-reset?email=${encodeURIComponent(
          emailqmk
        )}&otp=${encodeURIComponent(otp)}`
      );
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi x√°c th·ª±c OTP:", error);
      // N√©m l·ªói t·ª´ backend n·∫øu c√≥, ho·∫∑c tr·∫£ v·ªÅ l·ªói m·∫∑c ƒë·ªãnh
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },
  // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
  updatePassword: async (emailqmk, newPassword) => {
    try {
      // G·ª≠i email v√† m·∫≠t kh·∫©u m·ªõi d∆∞·ªõi d·∫°ng query parameters
      const response = await auth.post(
        `/auth/update-password?email=${encodeURIComponent(
          emailqmk
        )}&newPassword=${encodeURIComponent(newPassword)}`
      );
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      // N√©m l·ªói t·ª´ backend n·∫øu c√≥, ho·∫∑c tr·∫£ v·ªÅ l·ªói m·∫∑c ƒë·ªãnh
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },

  //dk
  // G·ª≠i m√£ OTP ƒë·∫øn email
  sendOtp: async (email) => {
    try {
      const response = await auth.post(
        `/auth/send-otp?email=${encodeURIComponent(email)}`
      );
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi g·ª≠i OTP:", error);

      if (error.response) {
        // N√©m l·ªói t·ª´ backend
        throw (
          error.response.data || {
            message: "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.",
          }
        );
      } else {
        // N√©m l·ªói k·∫øt n·ªëi ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh
        throw { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
      }
    }
  },

  // X√°c th·ª±c OTP
  verifyOtpforRegister: async (email, otp) => {
    try {
      const response = await auth.post(
        `/auth/verify-otp?email=${encodeURIComponent(
          email
        )}&otp=${encodeURIComponent(otp)}`
      );
      return response.data; // Tr·∫£ v·ªÅ th√¥ng b√°o t·ª´ API
    } catch (error) {
      console.error("L·ªói khi x√°c th·ª±c OTP:", error);

      // Ki·ªÉm tra l·ªói t·ª´ backend
      if (error.response) {
        console.error("Ph·∫£n h·ªìi t·ª´ backend:", error.response.data);
        throw error.response.data; // N√©m l·ªói t·ª´ backend
      }

      // L·ªói k·∫øt n·ªëi ho·∫∑c l·ªói kh√¥ng x√°c ƒë·ªãnh
      throw { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },
  changePassword: async (email, oldPassword, newPassword) => {
    try {
      const response = await auth.post(
        `/auth/change-password?email=${encodeURIComponent(
          email
        )}&oldPassword=${encodeURIComponent(
          oldPassword
        )}&newPassword=${encodeURIComponent(newPassword)}`
      );
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u:", error);
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },
  getAddressesByUserId: async (userID) => {
    try {
      const response = await address.get(`/address`, {
        params: { userID },
      });
      return response.data; // Tr·∫£ v·ªÅ danh s√°ch ƒë·ªãa ch·ªâ
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch ƒë·ªãa ch·ªâ:", error);
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },

  // Th√™m ƒë·ªãa ch·ªâ m·ªõi
  addNewAddress: async (addressData) => {
    try {
      const response = await address.post("/address", addressData);
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi th√™m ƒë·ªãa ch·ªâ:", error);
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },

  // ƒêƒÉng k√Ω t√†i kho·∫£n
  register: async (userData) => {
    try {
      const response = await auth.post(`/auth/register`, userData);
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ API
    } catch (error) {
      console.error("L·ªói khi ƒëƒÉng k√Ω t√†i kho·∫£n:", error);
      throw error.response?.data || { message: "L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!" };
    }
  },
};
//dang ky

//THANH TO√ÅN
export const handlePaymentApi = {
  // T·∫°o m√£ QR cho thanh to√°n
  createPaymentQR: async (amount, orderID, paymentMethod) => {
    try {
      console.log(
        "API call: Creating payment QR for amount:",
        amount,
        "orderID:",
        orderID,
        "method:",
        paymentMethod
      );
      const response = await paymentAPI.post("/payments/create-qr", {
        amount,
        orderID,
        paymentMethod,
      });
      console.log("Payment QR API response:", response.data);

      if (response.data) {
        return {
          qrCodeUrl: response.data.qrURL,
          message: response.data.message,
          paymentId: response.data.paymentID,
          orderID: response.data.orderID,
          paymentMethod: response.data.paymentMethod,
          paymentStatus: response.data.paymentStatus,
          amount: response.data.amount,
          content: response.data.content,
        };
      }
      return response.data;
    } catch (error) {
      console.error("Error details:", error.response || error);
      console.error("L·ªói khi t·∫°o m√£ QR thanh to√°n:", error.message);

      // Fallback: T·∫°o URL VietQR tr·ª±c ti·∫øp n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
      const vietQrUrl =
        "https://img.vietqr.io/image/MB-868629052003-compact2.png?amount=" +
        amount +
        "&addInfo=Thanh%20toan%20don%20hang&accountName=HUYNH%20HOANG%20PHUC&acqId=970422";

      return {
        qrCodeUrl: vietQrUrl,
        message: "T·∫°o m√£ QR thanh to√°n t·∫°m th·ªùi.",
        paymentId: "vietqr_" + Date.now(),
        paymentMethod: paymentMethod || "Bank Transfer",
        content: "TT" + Math.floor(100000 + Math.random() * 900000), // Add random payment content like backend
      };
    }
  },

  // Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
  checkPaymentStatus: async (data) => {
    try {
      const response = await paymentAPI.post("/payments/update-status", {
        paymentID: data,
        newStatus: "Completed",
      });
      return response.data;
    } catch (error) {
      console.error("Error checking payment status:", error);
      throw error;
    }
  },

  // L·∫•y danh s√°ch thanh to√°n theo orderID
  getPaymentByOrderId: async (orderID) => {
    try {
      const response = await paymentAPI.get(`/payments/${orderID}`);
      return response;
    } catch (error) {
      console.error("Error fetching payment by order ID:", error);
      throw error;
    }
  },
};

export default api;
